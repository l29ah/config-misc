-- import IPPrint.Colored
-- :set -interactive-print=IPPrint.Colored.cpprint
-- :def cp (\_ -> return ":set -interactive-print=IPPrint.Colored.cpprint")
-- :def ncp (\_ -> return ":set -interactive-print=print")
:set prompt "Î»> "
:set +m
:set -XOverloadedStrings -XFlexibleInstances -XMagicHash -XBangPatterns -XFlexibleContexts -XTypeApplications -XDeriveGeneric -XScopedTypeVariables -XDuplicateRecordFields -XDataKinds -XMultiParamTypeClasses -XTypeSynonymInstances -XKindSignatures -XTypeApplications
-- :set -fplugin=RecordDotPreprocessor
instance {-# INCOHERENT #-} Show [Char] where show s = "\"" ++ s ++ "\""

import Control.Monad
import Control.Monad.Fix
import Data.Bits
import Data.ByteString (ByteString)
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import Data.Default
import Data.List
import qualified Data.Map as M
import Data.Maybe
import Data.Proxy
import Data.Semigroup
import qualified Data.Text as T
import Data.Traversable
import Data.Word
import qualified GHC.Generics as GHC
import Numeric
import Text.Printf
--import GHC.TypeLits.Printf

--unroll = reverse . unfoldr step where step 0 = Nothing; step i = Just (fromIntegral i, i `shiftR` 8)
hex x = showHex x []
f2c x = (x - 32) / 1.8
